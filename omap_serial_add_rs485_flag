This patch is based on Ilya Yanok <yanok@xxxxxxxxxxx> and 
Javier Martinez Canillas <martinez.javier@xxxxxxxxx>. 
And I do some revising a little bit to make thisdriver can 
switch RS232 mode to RS485 mode with user application. 
When I transmit data from our board, then RTS will be pulled 
high immediatly, if you stop this action, the RTS signal will 
be pulled down automatically.


diff --git a/arch/arm/plat-omap/include/plat/omap-serial.h b/arch/arm/plat-omap/include/plat/omap-serial.h
index 7f5281e..0baa234 100644
--- a/arch/arm/plat-omap/include/plat/omap-serial.h
+++ b/arch/arm/plat-omap/include/plat/omap-serial.h
@@ -136,6 +136,8 @@ struct uart_omap_port {
 	u32			latency;
 	u32			calc_latency;
 	struct work_struct	qos_work;
+	struct serial_rs485	rs485;
+	unsigned int            tx_in_progress:1, tx_wait_end:1;
 };
 
 #endif /* __OMAP_SERIAL_H__ */
diff --git a/drivers/tty/serial/Makefile b/drivers/tty/serial/Makefile
index e10cf5b..0cb1d97 100644
--- a/drivers/tty/serial/Makefile
+++ b/drivers/tty/serial/Makefile
@@ -71,7 +71,7 @@ obj-$(CONFIG_SERIAL_VR41XX) += vr41xx_siu.o
 obj-$(CONFIG_SERIAL_SGI_IOC4) += ioc4_serial.o
 obj-$(CONFIG_SERIAL_SGI_IOC3) += ioc3_serial.o
 obj-$(CONFIG_SERIAL_ATMEL) += atmel_serial.o
-obj-$(CONFIG_SERIAL_UARTLITE) += uartlite.o
+#obj-$(CONFIG_SERIAL_UARTLITE) += uartlite.o
 obj-$(CONFIG_SERIAL_MSM) += msm_serial.o
 obj-$(CONFIG_SERIAL_MSM_HS) += msm_serial_hs.o
 obj-$(CONFIG_SERIAL_NETX) += netx-serial.o
diff --git a/drivers/tty/serial/omap-serial.c b/drivers/tty/serial/omap-serial.c
index ca24ab3..993017f 100644
--- a/drivers/tty/serial/omap-serial.c
+++ b/drivers/tty/serial/omap-serial.c
@@ -39,7 +39,7 @@
 #include <linux/irq.h>
 #include <linux/pm_runtime.h>
 #include <linux/of.h>
-
+#include <linux/uaccess.h>
 #include <plat/dma.h>
 #include <plat/dmtimer.h>
 #include <plat/omap-serial.h>
@@ -126,6 +126,56 @@ static void serial_omap_enable_ms(struct uart_port *port)
 	pm_runtime_put(&up->pdev->dev);
 }
 
+static inline void serial_omap_enable_ier_thri(struct uart_omap_port *up)
+{
+	if (!(up->ier & UART_IER_THRI)) {
+		up->ier |= UART_IER_THRI;
+		serial_out(up, UART_IER, up->ier);
+	}
+}
+
+static inline void serial_omap_disable_ier_thri(struct uart_omap_port *up)
+{
+	if (up->ier & UART_IER_THRI) {
+		up->ier &= ~UART_IER_THRI;
+		serial_out(up, UART_IER, up->ier);
+	}
+}
+
+static inline void serial_omap_thri_mode(struct uart_omap_port *up)
+{
+	unsigned char scr = serial_in(up, UART_OMAP_SCR);
+
+	if (up->tx_wait_end)
+		scr |= UART_OMAP_SCR_TX_EMPTY_CTL_IT;
+	else
+		scr &= ~UART_OMAP_SCR_TX_EMPTY_CTL_IT;
+	serial_out(up, UART_OMAP_SCR, scr);
+}
+
+static inline void serial_omap_update_rts(struct uart_omap_port *up)
+{
+	unsigned char mcr = up->mcr;
+	int rts_on_send = up->rs485.flags & SER_RS485_RTS_ON_SEND;
+
+	if (up->rs485.flags & SER_RS485_ENABLED) {
+		if (up->tx_in_progress) {
+			if (rts_on_send)
+				mcr |= UART_MCR_RTS;
+			else
+				mcr &= ~UART_MCR_RTS;
+		} else {
+			if (rts_on_send)
+				mcr &= ~UART_MCR_RTS;
+			else
+				mcr |= ~UART_MCR_RTS;
+		}
+	}
+
+	serial_out(up, UART_MCR, mcr);
+}
+
+static inline void wait_for_xmitr(struct uart_omap_port *up);
 static void serial_omap_stop_tx(struct uart_port *port)
 {
 	struct uart_omap_port *up = (struct uart_omap_port *)port;
@@ -146,9 +196,19 @@ static void serial_omap_stop_tx(struct uart_port *port)
 	}
 
 	pm_runtime_get_sync(&up->pdev->dev);
-	if (up->ier & UART_IER_THRI) {
-		up->ier &= ~UART_IER_THRI;
-		serial_out(up, UART_IER, up->ier);
+	//if (up->ier & UART_IER_THRI) {
+	//	up->ier &= ~UART_IER_THRI;
+	//	serial_out(up, UART_IER, up->ier);
+	//}
+	if (!(up->rs485.flags & SER_RS485_ENABLED)){
+		serial_omap_disable_ier_thri(up);
+	}
+	else {
+		up->tx_in_progress = 0;
+		serial_omap_update_rts(up);
+		up->tx_wait_end = 1;
+		serial_omap_thri_mode(up);
+		serial_omap_enable_ier_thri(up);
 	}
 
 	pm_runtime_mark_last_busy(&up->pdev->dev);
@@ -268,13 +328,13 @@ static void transmit_chars(struct uart_omap_port *up)
 		serial_omap_stop_tx(&up->port);
 }
 
-static inline void serial_omap_enable_ier_thri(struct uart_omap_port *up)
-{
-	if (!(up->ier & UART_IER_THRI)) {
-		up->ier |= UART_IER_THRI;
-		serial_out(up, UART_IER, up->ier);
-	}
-}
+//static inline void serial_omap_enable_ier_thri(struct uart_omap_port *up)
+//{
+//	if (!(up->ier & UART_IER_THRI)) {
+//		up->ier |= UART_IER_THRI;
+//		serial_out(up, UART_IER, up->ier);
+//	}
+//}
 
 static void serial_omap_start_tx(struct uart_port *port)
 {
@@ -282,6 +342,22 @@ static void serial_omap_start_tx(struct uart_port *port)
 	struct circ_buf *xmit;
 	unsigned int start;
 	int ret = 0;
+	unsigned char mcr = up->mcr;
+
+	if (up->rs485.flags & SER_RS485_ENABLED) {
+		if (!up->tx_in_progress) {
+			up->tx_in_progress = 1;
+			serial_omap_update_rts(up);
+
+		}
+		mcr &= ~UART_MCR_RTS;
+		serial_out(up, UART_MCR, mcr);
+		if (up->tx_wait_end) {
+			up->tx_wait_end = 0;
+			serial_omap_thri_mode(up);
+			serial_omap_disable_ier_thri(up);
+		}
+	}
 
 	if (!up->use_dma) {
 		pm_runtime_get_sync(&up->pdev->dev);
@@ -339,6 +415,7 @@ static void serial_omap_start_tx(struct uart_port *port)
 				up->uart_dma.uart_dma_tx, 0);
 	/* FIXME: Cache maintenance needed here? */
 	omap_start_dma(up->uart_dma.tx_dma_channel);
+
 }
 
 static unsigned int check_modem_status(struct uart_omap_port *up)
@@ -369,6 +446,11 @@ static unsigned int check_modem_status(struct uart_omap_port *up)
 	return status;
 }
 
+static inline unsigned int __serial_omap_tx_empty(struct uart_omap_port *up)
+{
+	return serial_in(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+}
+
 /**
  * serial_omap_irq() - This handles the interrupt from one port
  * @irq: uart port irq number
@@ -389,6 +471,16 @@ static inline irqreturn_t serial_omap_irq(int irq, void *dev_id)
 	}
 
 	spin_lock_irqsave(&up->port.lock, flags);
+	if (up->tx_wait_end && (iir & UART_IIR_THRI) &&
+	    __serial_omap_tx_empty(up)) {
+		up->tx_wait_end = 0;
+		up->tx_in_progress = 1;
+		serial_omap_thri_mode(up);
+		serial_omap_update_rts(up);
+		serial_omap_disable_ier_thri(up);
+		spin_unlock_irqrestore(&up->port.lock, flags);
+		return IRQ_HANDLED;
+	}
 	lsr = serial_in(up, UART_LSR);
 	if (iir & UART_IIR_RLSI) {
 		if (!up->use_dma) {
@@ -424,7 +516,8 @@ static unsigned int serial_omap_tx_empty(struct uart_port *port)
 	pm_runtime_get_sync(&up->pdev->dev);
 	dev_dbg(up->port.dev, "serial_omap_tx_empty+%d\n", up->port.line);
 	spin_lock_irqsave(&up->port.lock, flags);
-	ret = serial_in(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+	//ret = serial_in(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+	ret = __serial_omap_tx_empty(up);
 	spin_unlock_irqrestore(&up->port.lock, flags);
 	pm_runtime_put(&up->pdev->dev);
 	return ret;
@@ -472,7 +565,11 @@ static void serial_omap_set_mctrl(struct uart_port *port, unsigned int mctrl)
 
 	pm_runtime_get_sync(&up->pdev->dev);
 	up->mcr = serial_in(up, UART_MCR);
-	up->mcr |= mcr;
+	//up->mcr |= mcr;
+
+	if (up->rs485.flags & SER_RS485_ENABLED)
+		serial_omap_update_rts(up);
+	up->mcr = (up->mcr & ~(UART_MCR_RTS | UART_MCR_DTR | UART_MCR_OUT1 | UART_MCR_OUT2 | UART_MCR_LOOP)) | mcr;
 	serial_out(up, UART_MCR, up->mcr);
 	pm_runtime_put(&up->pdev->dev);
 }
@@ -1128,6 +1225,40 @@ static inline void serial_omap_add_console_port(struct uart_omap_port *up)
 
 #endif
 
+static int serial_omap_ioctl(struct uart_port *port, unsigned int cmd, unsigned long arg) {
+
+	struct serial_rs485 rs485conf;
+	struct uart_omap_port *up = (struct uart_omap_port *)port;
+	unsigned long flags;
+
+	switch (cmd) {
+
+		case TIOCSRS485:
+			if (copy_from_user(&rs485conf, (struct serial_rs485 *) arg, sizeof(rs485conf)))
+			return -EFAULT;
+
+			spin_lock_irqsave(&up->port.lock, flags);
+			if (!(rs485conf.flags & SER_RS485_ENABLED)) {
+				up->tx_in_progress = 0;
+				up->tx_wait_end = 0;
+			}
+			up->rs485 = rs485conf;
+			serial_omap_update_rts(up);
+			serial_omap_thri_mode(up);
+			spin_unlock_irqrestore(&up->port.lock, flags);
+
+		case TIOCGRS485:
+			if (copy_to_user((struct serial_rs485 *) arg,
+						&(up->rs485), sizeof(rs485conf)))
+				return -EFAULT;
+			break;
+
+		default:
+			return -ENOIOCTLCMD;
+	}
+	return 0;
+}
+
 static struct uart_ops serial_omap_pops = {
 	.tx_empty	= serial_omap_tx_empty,
 	.set_mctrl	= serial_omap_set_mctrl,
@@ -1141,6 +1272,7 @@ static struct uart_ops serial_omap_pops = {
 	.shutdown	= serial_omap_shutdown,
 	.set_termios	= serial_omap_set_termios,
 	.pm		= serial_omap_pm,
+	.ioctl		= serial_omap_ioctl,
 	.type		= serial_omap_type,
 	.release_port	= serial_omap_release_port,
 	.request_port	= serial_omap_request_port,
diff --git a/include/linux/serial_reg.h b/include/linux/serial_reg.h
index 8ce70d7..1b35875 100644
--- a/include/linux/serial_reg.h
+++ b/include/linux/serial_reg.h
@@ -362,6 +362,7 @@
 #define UART_OMAP_MDR1_FIR_MODE		0x05	/* FIR mode */
 #define UART_OMAP_MDR1_CIR_MODE		0x06	/* CIR mode */
 #define UART_OMAP_MDR1_DISABLE		0x07	/* Disable (default state) */
+#define UART_OMAP_SCR_TX_EMPTY_CTL_IT	0x04	/* TX Empty IRQ mode */
 
 #endif /* _LINUX_SERIAL_REG_H */
 
